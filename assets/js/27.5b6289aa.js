(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{343:function(t,s,a){"use strict";a.r(s);var n=a(33),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"windows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[t._v("#")]),t._v(" windows")]),t._v(" "),a("h2",{attrs:{id:"iswindows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iswindows"}},[t._v("#")]),t._v(" isWindows")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("\nprocess"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("platform "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'win32'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^(msys|cygwin)$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OSTYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"commandconvert-变量替换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commandconvert-变量替换"}},[t._v("#")]),t._v(" commandConvert 变量替换")]),t._v(" "),a("blockquote",[a("p",[t._v("如果使用一个不存在的变量，类unix脚本解释为空 windows原值使用")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// In Windows, non-existent variables are not replaced by the shell,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// so for example "echo %FOO%" will literally print the string "%FOO%", as')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// opposed to printing an empty string in UNIX. See kentcdodds/cross-env#145")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If the env variable isn't defined at runtime, just strip it from the command entirely")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从env中获取暂存的变量值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("varName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("varName"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"其他一些操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他一些操作"}},[t._v("#")]),t._v(" 其他一些操作")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\n * This will transform UNIX-style list values to Windows-style.\n * For example, the value of the $PATH variable "/usr/bin:/usr/local/bin:."\n * will become "/usr/bin;/usr/local/bin;." on Windows.\n * @param {String} varValue Original value of the env variable\n * @param {String} varName Original name of the env variable\n * @returns {String} Converted value\n */')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// /usr/bin:/usr/local/bin:.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ; 和 :之间的转换")]),t._v("\n\n\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);